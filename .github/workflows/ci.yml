name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
      # don't cancel all jobs just because one of them failed
      fail-fast: false

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
    - name: Setup Python 3
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      working-directory: ${{runner.workspace}}/build
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_BLACKBOX_TESTS=ON -DBUILD_UNIT_TESTS=ON -DBUILD_PYTHON_MODULE=ON -DBUILD_C_API=ON

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . -j8 --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -V -C $BUILD_TYPE

  build-ubuntu-sanitize:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{github.ref}}
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure
      run: cmake -S $GITHUB_WORKSPACE -B ${{runner.workspace}}/build -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_BLACKBOX_TESTS=ON -DBUILD_UNIT_TESTS=ON -DBUILD_PYTHON_MODULE=OFF -DBUILD_C_API=ON -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_FLAGS="-march=native -fsanitize=address,undefined -fno-optimize-sibling-calls -fsanitize-address-use-after-scope -fno-omit-frame-pointer"

    - name: Build
      run: cmake --build ${{runner.workspace}}/build -j8

    - name: Test
      working-directory: ${{runner.workspace}}/build
      run: ctest -V

  build-ios:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{github.ref}}

    - name: Build the swift package
      shell: sh
      working-directory: ${{runner.workspace}}/${{github.event.repository.name}}
      run: swift build

    - name: Build the demo app
      shell: sh
      working-directory: ${{runner.workspace}}/${{github.event.repository.name}}/wrappers/ios/demo
      run: xcodebuild build -scheme demo -sdk "iphonesimulator"

    - name: Validate the Pod
      shell: sh
      working-directory: ${{runner.workspace}}/${{github.event.repository.name}}
      run: pod lib lint --allow-warnings

  build-android:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build the lib/app
      working-directory: wrappers/android
      run: ./gradlew assembleDebug # build only the debug version of the aar (faster build)

    - uses: actions/upload-artifact@v3
      with:
        name: android-artifacts
        path: "wrappers/android/zxingcpp/build/outputs/aar/zxingcpp-debug.aar"

  build-wasm:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: mymindstorm/setup-emsdk@v12

    - name: Configure
      run: emcmake cmake -Swrappers/wasm -Bbuild

    - name: Build
      run: cmake --build build -j4

#    - name: Test
#      run: node build/EmGlueTests.js

    - uses: actions/upload-artifact@v3
      with:
        name: wasm-artifacts
        path: |
            build/zxing*
            build/demo*

  build-python:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.12']
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      working-directory: wrappers/python
      run: |
        python -m pip install --upgrade pip setuptools
        python -m pip install numpy pillow

    - name: Build module
      working-directory: wrappers/python
      run: python -m pip -v install -e .

    - name: Test module
      working-directory: wrappers/python
      run: python -m unittest -v
